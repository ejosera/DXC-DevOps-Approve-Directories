## Seccion: triger none
trigger: none

## Seccion: de pool
pool:
  vmImage: ubuntu-latest

## Seccion: variables del backend
variables:
  bkstrgrg: "terraformtfstate"
  bkstrg: "terraformtfstatecicd"
  bkcontainer: "tfstate"
  bkstrgkey: "terraformcicd"

## Seccion: Stages
stages:

## Seccion: Stages
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          # install
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          # init
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          # validate
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'


  - stage: "plan_1RG1"
    displayName: plan
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: plan
        steps:
          # install terraform
          - task: TerraformInstaller@1
            displayName: plan - install terraform
            inputs:
              terraformVersion: 'latest'
          # init
          - task: TerraformTaskV4@4
            displayName: Initialize Terraform
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)`'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          # plan
          - task: TerraformTaskV4@4
            displayName: Plan Terraform Deployment            
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/1RG1'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'

  # Approve
  - stage: "Approve_1RG1"
    displayName: Approve
    condition: succeeded('plan_1RG1')
    dependsOn: "plan_1RG1"
    jobs:
    - job: approve
      displayName: Wait for approval
      pool: server
      steps: 
      - task: ManualValidation@0
        timeoutInMinutes: 60
        inputs:
          notifyUsers: 'joseramon.lopez@dxc.com'
          instructions: 'Review the plan in the next hour'   
                
  - stage: "tfdeploy_1RG1"
    condition: succeeded("Approve_1RG1")
    dependsOn: "Approve_1RG1"
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/1RG1'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'

  - stage: "plan_1RG2"
    displayName: plan
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: plan
        steps:
          # install terraform
          - task: TerraformInstaller@1
            displayName: plan - install terraform
            inputs:
              terraformVersion: 'latest'
          # init
          - task: TerraformTaskV4@4
            displayName: Initialize Terraform
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)`'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          # plan
          - task: TerraformTaskV4@4
            displayName: Plan Terraform Deployment            
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/1RG2'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'

  # Approve
  - stage: "Approve_1RG2"
    displayName: Approve
    condition: succeeded("plan_1RG2")
    dependsOn: "plan_1RG2"
    jobs:
    - job: approve
      displayName: Wait for approval
      pool: server
      steps: 
      - task: ManualValidation@0
        timeoutInMinutes: 60
        inputs:
          notifyUsers: 'joseramon.lopez@dxc.com'
          instructions: 'Review the plan in the next hour'   
                
  - stage: "tfdeploy_1RG2"
    condition: succeeded("Approve_1RG2")
    dependsOn: "Approve_1RG2"
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/1RG2'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'

  - stage: "plan_2vnet1"
    displayName: plan
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: plan
        steps:
          # install terraform
          - task: TerraformInstaller@1
            displayName: plan - install terraform
            inputs:
              terraformVersion: 'latest'
          # init
          - task: TerraformTaskV4@4
            displayName: Initialize Terraform
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)`'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          # plan
          - task: TerraformTaskV4@4
            displayName: Plan Terraform Deployment            
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/2vnet1'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'

  # Approve
  - stage: "Approve_2vnet1"
    displayName: Approve
    condition: succeeded("plan_2vnet1")
    dependsOn: "plan_2vnet1"
    jobs:
    - job: approve
      displayName: Wait for approval
      pool: server
      steps: 
      - task: ManualValidation@0
        timeoutInMinutes: 60
        inputs:
          notifyUsers: 'joseramon.lopez@dxc.com'
          instructions: 'Review the plan in the next hour'   
                
  - stage: "tfdeploy_2vnet1"
    condition: succeeded("Approve_2vnet1")
    dependsOn: "Approve_2vnet1"
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/2vnet1'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'

  - stage: "plan_2vnet2"
    displayName: plan
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: plan
        steps:
          # install terraform
          - task: TerraformInstaller@1
            displayName: plan - install terraform
            inputs:
              terraformVersion: 'latest'
          # init
          - task: TerraformTaskV4@4
            displayName: Initialize Terraform
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)`'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          # plan
          - task: TerraformTaskV4@4
            displayName: Plan Terraform Deployment            
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/2vnet2'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'

  # Approve
  - stage: "Approve_2vnet2"
    displayName: Approve
    condition: succeeded("plan_2vnet2")
    dependsOn: "plan_2vnet2"
    jobs:
    - job: approve
      displayName: Wait for approval
      pool: server
      steps: 
      - task: ManualValidation@0
        timeoutInMinutes: 60
        inputs:
          notifyUsers: 'joseramon.lopez@dxc.com'
          instructions: 'Review the plan in the next hour'   
                
  - stage: "tfdeploy_2vnet2"
    condition: succeeded("Approve_2vnet2")
    dependsOn: "Approve_2vnet2"
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Visual Studio Enterprise(4abab78e-cc44-4dc6-b6c0-35280c169a76)'
              backendAzureRmResourceGroupName: '$(bkstrgrg)'
              backendAzureRmStorageAccountName: '$(bkstrg)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstrgkey)'
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/2vnet2'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'
